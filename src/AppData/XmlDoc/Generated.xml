<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Outpost31</name>
    </assembly>
    <members>
        <member name="M:Outpost31.Core.Avatar.ScriptParameter.Request(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>
            Processes a request based on the parameters provided in the specified session.
            </summary>
            <remarks>The method determines the type of request by analyzing the <see
            cref="P:Outpost31.Core.Session.TngnWbsvSession.SentScriptParam"/> property  and delegates the processing to the appropriate handler.
            Supported request types include prototype requests,  admin requests, and form access requests. If the
            request type is unrecognized, a default response is returned.</remarks>
            <param name="tngnWbsvSession">The session object containing the request parameters and runtime settings.  This parameter cannot be
            <c>null</c>.</param>
        </member>
        <member name="T:Outpost31.Core.Avatar.OptionObjects">
            <summary>The data structure that is used to pass information between Avatar and the Tingen Web Service.</summary>
            <remarks>
                <para>
                    The OptionObjects class contains the logic for managing OptionObjects, which<br />
                    contain all of the content and metadata of the Avatar form that is sent to<br />
                    the Tingen Web Service.
                </para>
                <para>
                    There are three types of OptionObjects:
                    <list type="bullet">
                        <item><see cref="P:Outpost31.Core.Avatar.OptionObjects.SentOptObj">SentOptObj</see></item>
                        <item><see cref="P:Outpost31.Core.Avatar.OptionObjects.WorkOptObj">WorkOptObj</see></item>
                        <item><see cref="P:Outpost31.Core.Avatar.OptionObjects.ReturnOptObj">ReturnOptObj</see></item>
                    </list>
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Avatar.OptionObjects.SentOptObj">
            <summary>The original OptionObject sent from Avatar.</summary>
            <remarks>This is never modified during a Tingen Web Service session.</remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.OptionObjects.WorkOptObj">
            <summary>Where OptionObject work is done.</summary>
            <remarks>This object is potentially modified during a Tingen Web Service session.</remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.OptionObjects.ReturnOptObj">
            <summary>The OptionObject that is returned to Avatar.</summary>
            <remarks>This is the finalized WorkOptObj, ready to be returned to Avatar.</remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.OptionObjects.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.Avatar.OptionObjects.Finalize(Outpost31.Core.Session.TngnWbsvSession,System.Int32,System.String)">
            <summary>Finalize an OptionObject so it can be returned to Avatar.</summary>
            <param name="tngnSession">The Tingen Session data structure object.</param>
            <param name="errorCode">The OptionObject Error Code.</param>
            <param name="errorMessage">The OptionObject error message.</param>
            <remarks>
                <note title="Important information about this method">
                    Before an OptionObject can be returned to Avatar, we need to make sure<br />
                    that all of the required OptionObject components exist and/or are<br />
                    modified correctly.<br />
                    <br />
                    This is done by calling the OptionObject's built<br />
                    in <c>ToReturnOptionObject()</c> method on the OptionObject, then<br />
                    sending it back to Avatar.
                </note>
                <para>
                    <b>Error Codes</b><br />
                    When an OptionObject is returned to Avatar, it requires one of the following<br />
                    single-digit integer Error Codes:
                    <list type="table">
                        <listheader>
                            <term>Error Code</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>0</term>
                            <description>No action taken</description>
                        </item>
                        <item>
                            <term>1</term>
                            <description>
                                Returns an Error Message with an "Ok" button, and stops<br />
                                further processing of scripts
                            </description>
                        </item>
                        <item>
                            <term>2</term>
                            <description>
                                Returns an Error Message with "OK" and "Cancel" buttons,<br />
                                and stops further scripts the user clicks "Cancel")
                            </description>
                        </item>
                        <item>
                            <term>3</term>
                            <description>Returns an Error Message with "Ok" button</description>
                        </item>
                        <item>
                            <term>4</term>
                            <description>
                                Returns an Error Message with "Yes" and "No" buttons<br />
                                and stops further scripts the user clicks "No")
                            </description>
                        </item>
                        <item>
                            <term>5</term>
                            <description>Returns a URL to be opened in a new browser</description>
                        </item>
                        <item>
                            <term>6</term>
                            <description>Returns a form to be opened in Avatar</description>
                        </item>
                    </list>
                </para>
                <note title="Common Error Codes">
                    The most common error codes are:
                    <list type="bullet">
                        <item>
                            <term>1</term>
                            <description>
                                Used when you don't want the user to take an action, such as<br />
                                submitting a form
                            </description>
                        </item>
                        <item>
                            <term>3</term>
                            <description>Used when you would like to notify the user of something</description>
                        </item>
                        <item>
                            <term>4</term>
                            <description>
                                Used when you want warn the user they may want to make<br />
                                changes, and give them the option to stop further processing,<br />
                                or continuing
                            </description>
                        </item>
                    </list>
                </note>
                <para>
                    Please see the <see cref="T:Outpost31.Core.Avatar.OptionObjects" /> class documentation for more information about Error Codes.<br />
                </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Core.Logger.Component">
            <summary>Provides methods for generating log data in various formats, including basic and standard logs.</summary>
            <remarks>
                The <see cref="T:Outpost31.Core.Logger.Component"/> class offers static methods to create structured log data as
                dictionaries, which include file paths and log content. These methods are designed to support different logging
                scenarios, such as basic logging and detailed logging with additional metadata.
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildLog(System.String,System.String,System.String)">
            <summary>Creates a basic log entry with the specified log type, environment, and optional message.</summary>
            <param name="logType">The type of the log, such as "Error", "Info", or "Debug".</param>
            <param name="avatarEnv">The environment associated with the log, such as a specific application or system context.</param>
            <param name="logMsg">An optional message to include in the log. If not provided, the log will contain only the default content
            for the specified log type.</param>
            <returns>A dictionary containing the log details, where the "Path" key represents the full path to the log file, and
            the "Content" key contains the formatted log content.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildLog(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a standardized log entry containing metadata and content for logging purposes.
            </summary>
            <remarks>
                This method is designed to standardize log entries by combining metadata (such as
                source information and environment) with the log message. The resulting dictionary can be used to write logs
                to a file or other storage medium
            </remarks>
            <param name="logType">The type of log (e.g., "Error", "Info", "Debug") that categorizes the log entry.</param>
            <param name="avatarEnv">The environment or context in which the log is being generated (e.g., "Production", "Development").</param>
            <param name="exeAsm">The name of the executing assembly, typically used to identify the source of the log.</param>
            <param name="fromPath">The name of the class from which the log entry originates.</param>
            <param name="fromMethod">The name of the method from which the log entry originates.</param>
            <param name="fromLine">The line number in the source code where the log entry is generated.</param>
            <param name="logMsg">An optional message providing additional details about the log entry. Defaults to an empty string if not
            provided.</param>
            <returns>A dictionary containing two key-value pairs: <list type="bullet"> <item> <description> <c>"Path"</c>: The
            full path to the log file where the entry should be stored. </description> </item> <item> <description>
            <c>"Content"</c>: The formatted content of the log entry, including metadata and the optional message.
            </description> </item> </list></returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildHeader(System.String)">
            <summary>Generates a formatted header string for a log entry.</summary>
            <param name="logType">The type of log (e.g., "Error", "Info", "Debug") to include in the header.</param>
            <returns>A string containing a formatted log header, including the log type, current date and time, and separators.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildHeader(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Generates a standardized log header containing metadata about the log type, assembly, class, method, and line number.</summary>
            <param name="logType">The type of the log (e.g., "Error", "Info", "Debug").</param>
            <param name="exeAsm">The name of the executing assembly.</param>
            <param name="fromPath">The name of the class where the log is being generated.</param>
            <param name="fromMethod">The name of the method where the log is being generated.</param>
            <param name="fromLine">The line number in the source code where the log is being generated.</param>
            <returns>A formatted string containing the log header with the provided metadata.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.GetCallingClassName(System.String)">
            <summary>Extracts the class name from a given file path.</summary>
            <param name="fromPath">The file path from which to extract the class name. Must be a valid path string.</param>
            <returns>The name of the class, derived from the last segment of the provided file path.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildBasePath(System.String,System.String)">
            <summary>Constructs the base file path for storing logs based on the specified environment and log type.</summary>
            <param name="tngnWbsvEnvironment">The name of the environment (e.g., "Production", "Development") used to determine the directory structure.</param>
            <param name="logType">The type of log (e.g., "Error", "Info") used to specify the log subdirectory.</param>
            <returns>A string representing the full base path for the logs, combining the environment and log type.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildFullPath(System.String,System.String)">
            <summary>Constructs the full file path for a log file based on the specified environment and log type.</summary>
            <remarks>
                The method appends a timestamp in the format "yyMMddHHmmssfffffff" to ensure unique
                file names.
            </remarks>
            <param name="tngnWbsvEnvironment">The environment identifier used to determine the base path.</param>
            <param name="logType">The type of log, which determines the file extension.</param>
            <returns>A string representing the full file path, including the base path, a timestamp, and the log type as the file
            extension.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildContent(System.String,System.String)">
            <summary>Constructs a formatted log entry string containing the specified log type and message.</summary>
            <param name="logType">The type of the log entry, such as "INFO", "ERROR", or "DEBUG".</param>
            <param name="message">The message to include in the log entry. This value cannot be null.</param>
            <returns>A formatted string that includes the log type and message, separated by a header and a newline.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.Component.BuildContent(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>Constructs a formatted log message containing metadata and the provided log content.</summary>
            <param name="logType">The type of log (e.g., "Error", "Warning", "Info").</param>
            <param name="avatarEnv">The environment or context in which the log is generated.</param>
            <param name="asmName">The name of the assembly where the log originates.</param>
            <param name="fromPath">The file path of the source code that generated the log.</param>
            <param name="fromMethod">The name of the method that generated the log.</param>
            <param name="fromLine">The line number in the source code where the log was generated.</param>
            <param name="logMsg">The main log message content to include in the output.</param>
            <returns>A formatted string containing the log metadata and message, separated by a newline.</returns>
        </member>
        <member name="T:Outpost31.Core.Logger.LogEvent">
            <summary>Methods for creating different types of logs.</summary>
        </member>
        <member name="M:Outpost31.Core.Logger.LogEvent.Trace(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>Creates Trace Log.</summary>
            <remarks>
                <note title="About this method">
                    <list type="bullet">
                        <item>
                            This method creates Trace Logs, which are used for debugging<br/>
                            and tracking the flow of the application.
                        </item>
                        <item>
                            Trace Logs can't go here because the logging infrastructure<br/>
                            hasn't been initialized yet. If you need to create a log here,<br/>
                            use a Debuggler Log instead.
                        </item>
                    </list>
                </note>
                <para>
                    Trace Logs are assigned a level between 0 and 9:
                    <list type="bullet">
                        <item>0 - None</item>
                        <item>1 - Methods</item>
                        <item>2 - Conditional statements</item>
                        <item>9 - All</item>
                    </list>
                </para>
            </remarks>
            <param name="traceLevel">The Trace Log level.</param>
            <param name="avatarEnvironment">The Avatar environment that interfaces with the Tingen Web Service.</param>
            <param name="asmName">The name of the assembly generating the trace.</param>
            <param name="callerFilePath">The full file path of the source code file that invoked the method.</param>
            <param name="callingMethod">The name of the method that invoked the trace.</param>
            <param name="methodLine">The line number in the source code file where the trace was invoked.</param>
            <param name="message">The message to include in the trace log. Defaults to "No message." if not specified.</param>
        </member>
        <member name="T:Outpost31.Core.Request.PrototypeRequest">
            <summary>Handles prototype requests.</summary>
        </member>
        <member name="M:Outpost31.Core.Request.PrototypeRequest.Parse(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Parse the request and call the appropriate module.</summary>
        </member>
        <member name="T:Outpost31.Core.Request.StandardRequest">
            <summary>Handles standard requests.</summary>
        </member>
        <member name="M:Outpost31.Core.Request.StandardRequest.Parse(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Parse the request and call the appropriate module.</summary>
        </member>
        <member name="M:Outpost31.Core.Request.StandardRequest.Admin(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Admin requests.</summary>
        </member>
        <member name="M:Outpost31.Core.Request.StandardRequest.FormAccess(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Form access requests.</summary>
        </member>
        <member name="M:Outpost31.Core.Request.StandardRequest.FormAccessFromList(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Form access from a list.</summary>
        </member>
        <member name="T:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings">
            <summary>Runtime settings for the Tingen Web Service.</summary>
            <remarks>
                <para>
                    This class is used to set the runtime configurations for the Tingen Web Service.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.TngnWbsvVersion">
            <summary>The Tingen Web Service version number.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.TngnWbsvBuild">
            <summary>The Tingen Web Service build number.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.TngnWbsvEnvironment">
            <summary>The environment that the Tingen Web Service will interface with.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.TngnWbsvMode">
            <summary>The Tingen Web Service mode.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.TngnWbsvDataPath">
            <summary>The Tingen Web Service data path.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.TngnWbsvHostName">
            <summary>The name of the machine running the Tingen Web Service.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.CurrentDate">
            <summary>The current date in YYMMDD format.</summary>
        </member>
        <member name="P:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.CurrentTime">
            <summary>The current time in HHMMSS format.</summary>
        </member>
        <member name="M:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.New(System.String,System.String)">
            <summary>Creates a new instance of the RuntimeSettings class.</summary>
            <returns>An object containing the runtime settings for the Tingen Web Service.</returns>
            <remarks>
                <para>
                    This method sets all runtime settings for the Tingen Web Service.
                </para>
                <para>                 
                    The following runtime settings are loaded from external files:
                    <list type="bullet">
                        <item>
                            <b>tngnWbsvEnv</b><br />
                            The Avatar environment that the Tingen Web Service will interface with.<br />
                            This value is stored in the <c>.\AppData\Runtime\TngnWbsv.Env</c> file,<br />
                            and must be a valid Avatar environment.<br />
                            <i>If this file does not exist, the Tingen Web Service will not start.</i><br />
                        </item>
                        <item>
                            <b>tngnWbsvEnvDataPath</b><br />
                            The path on the machine that hosts the Tingen Web Service, where all data<br />
                            required by the Tingen Web Service will be stored. This is per-environment,<br />
                            and the first part of this path is hardcoded as <c>C:\Tingen_Data\</c>, so<br />
                            the directory must exist on the hosts machine.
                        </item>
                        <item>
                            <b>tngnWbsvMode</b><br />
                            The Avatar environment that the Tingen Web Service will interface with.<br />
                            This value is stored in the <c>.\AppData\Runtime\TngnWbsv.Env</c> file,<br />
                            and must be a valid Avatar environment.<br />
                            <i>If this file does not exist, the Tingen Web Service will not start.</i><br />
                        </item>
                    </list>
                </para>
                <para>
                    In addition to the above, this method also sets the Tingen Web Service <c>build</c> number,<br />
                    which is in <c>YYMMDD</c> format. This value must be updated whenever the Tingen Web Service<br />
                    is deployed to the host machine.
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.GetTngnWbsvMode(System.String,System.Collections.Generic.List{System.String})">
            <summary>Get the contents of a file, and validate it.</summary>
            <param name="filePath">The file path.</param>
            <param name="validateAgainst">A list of values to validate against.</param>
            <returns>The valid contents of the file (or we exit the application).</returns>
            <!-- No matching elements were found for the following include tag --><include file="AppData/XmlDoc/Core.Runtime.xml" path="Core.Runtime/Class[@name=&quot;TngnWbsvRuntimeSettings&quot;]/TngnWbsvRuntimeSettings.New/*" />
        </member>
        <member name="M:Outpost31.Core.Runtime.TngnWbsvRuntimeSettings.ValidTngnWbsvModes">
            <summary>Valid Tingen Web Service modes.</summary>
            <returns>A list of valid Tingen Web Service modes.</returns>
        </member>
        <member name="T:Outpost31.Core.Configuration.TngnWbsvConfiguration">
            <summary>Runtime setting logic for the Tingen Web Service.</summary>
            <!-- No matching elements were found for the following include tag --><include file="AppData/XmlDoc/Core.Runtime.xml" path="Core.Runtime/Class[@name=&quot;TngnWbsvConfiguration&quot;]/ClassDescription/*" />
        </member>
        <member name="M:Outpost31.Core.Configuration.TngnWbsvConfiguration.New(System.String)">
            <summary>Load the runtime settings for the Tingen Web Service.</summary>
            <param name="tngnWbsvVersion">The Tingen Web Service version</param>
            <returns>Runtime settings for the Tingen Web Service.</returns>
            <!-- No matching elements were found for the following include tag --><include file="AppData/XmlDoc/Core.Runtime.xml" path="Core.Runtime/Class[@name=&quot;TngnWbsvConfiguration&quot;]/ClassDescription/*" />
        </member>
        <member name="M:Outpost31.Core.Configuration.TngnWbsvConfiguration.TngnWbsvConfigSummary(Outpost31.Core.Configuration.TngnWbsvConfiguration,System.String)">
            <summary>The summary of the Tingen Web Service configuration at runtime.</summary>
            <return>A summary of the Tingen Web Service configuration at runtime.</return>
        </member>
        <member name="T:Outpost31.Core.Session.TngnWbsvSession">
            <summary> Session logic for the Tingen Web Service.</summary>
            <remarks>
                <para>
                    The TngnWbsvSession class is used to create and initialize a <c>TngnWbsvSession</c> object, which<br />
                    contains all of the information the Tingen Web Service needs to process a request.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Session.TngnWbsvSession.TngnWbsvConfig">
            <summary>The Tingen Web Service configuration object.</summary>
            <remarks>The TngnWbsvConfig object contains all runtime and external configuration information.</remarks>
        </member>
        <member name="P:Outpost31.Core.Session.TngnWbsvSession.SentOptObj">
            <summary>The original OptionObject sent from Avatar.</summary>
        </member>
        <member name="P:Outpost31.Core.Session.TngnWbsvSession.WorkOptObj">
            <summary>The OptionObject that is (potentially) modified during a Tingen session.</summary>
        </member>
        <member name="P:Outpost31.Core.Session.TngnWbsvSession.ReturnOptObj">
            <summary>The OptionObject that is returned to Avatar. </summary>
        </member>
        <member name="P:Outpost31.Core.Session.TngnWbsvSession.SentScriptParam">
            <summary>The ScriptLink Script Parameter sent from Avatar.</summary>
        </member>
        <member name="P:Outpost31.Core.Session.TngnWbsvSession.TngnWbsvSysCode">
            <summary>The Avatar System Code that this instance of the Tingen Web Service will interface with.</summary>
        </member>
        <member name="M:Outpost31.Core.Session.TngnWbsvSession.New(ScriptLinkStandard.Objects.OptionObject2015,System.String,System.String,System.String)">
            <summary>Creates and initializes a new TngnWbsvSession object</summary>
            <param name="sentOptObj">The OptionObject that is sent from Avatar.</param>
            <param name="sentScriptParam">The Script Parameter that is sent from Avatar.</param>
            <param name="tngnWbsvVersion">The current version of the Tingen Web Service.</param>
            <returns>A new Tingen Web Service session object.</returns>
            <remarks>
                <para>
                    The TngnWbsvSession object contains:
                    <list type="bullet">
                        <item>
                            <term>The TngnWbsvConfig object</term>
                            <description>All runtime and external configuration information</description>
                        </item>
                        <item>
                            <term>OptionObjects</term>
                            <description>All necessary OptionObjects</description>
                        </item>
                        <item>
                            <term>The Scriptlink Script Parameter</term>
                            <description>The Script Parameter sent from Avatar that contains the request</description>
                        </item>
                        <item>
                            <term>An Avatar System Code</term>
                            <description>The Avatar System Code that the Tingen Web Service will interface with</description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Template.Message.FormAccessDeniedGeneral">
            <summary>The Access Denied error code message.</summary>
            <returns>The Access Denied error code message.</returns>
        </member>
        <member name="M:Outpost31.Core.Template.Detail.Runtime(Outpost31.Core.Runtime.TngnWbsvRuntimeSettings)">
            <summary>The summary of the Tingen Web Service configuration at runtime.</summary>
            <return>A summary of the Tingen Web Service configuration at runtime.</return>
        </member>
        <member name="T:Outpost31.Core.Utility.Du.DuFile">
            <summary>Logic related to files input/output.</summary>
        </member>
        <member name="M:Outpost31.Core.Utility.Du.DuFile.ReadLocal(System.String)">
            <summary>Returns the contents or status of a file. </summary>
            <param name="filePath">The path to the file.</param>
            <remarks>
                <para>
                    If the file exists <i>and has content</i>, that content is returned.<br/>
                    <br/>
                    If the file <i>does not exist</i>, or exists <i>but is empty</i>, an error message is returned.
                </para>
            </remarks>
            <returns>The content or status of the file.</returns>
        </member>
        <member name="M:Outpost31.Core.Utility.Du.DuFile.ReadAndVerifyLocal(System.String,System.Collections.Generic.List{System.String})">
            <summary>Returns the contents (if valid) or status of a file. </summary>
            <param name="filePath">The path to the file.</param>
            <param name="validContent">A list of valid content.</param>
            <remarks>
                <para>
                    GetContent() returns the contents or status of the file.<br/>
                    <br/>
                    If the file contains data, that data is checked against the list of valid content.
                </para>
            </remarks>
            <returns>The verified content or status of the file.</returns>
        </member>
        <member name="M:Outpost31.Core.Utility.Du.DuJson.ExportToLocalFile``1(``0,System.String,System.Boolean)">
            <summary>Export JSON data to an external file.</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="jsonObject">The JSON object.</param>
            <param name="filePath">The export file path.</param>
            <param name="formatJson">Determines if the JSON data is formatted.</param>
            <remarks>
                <para>
                    <example>
                        To export a nicely-formatted JSON object:
                        <code>
                            TheObject theObject = new TheObject();
                            DuJson.ExportToLocalFile&lt;TheObject&gt;(theObject, "/Path/To/Export/File");
                        </code>
                    </example>
                    <example>
                        To export an unformatted JSON object:
                        <code>
                            TheObject theObject = new TheObject();
                            DuJson.ExportToLocalFile&lt;TheObject&gt;(theObject, "/Path/To/Export/File", false);
                        </code>
                    </example>
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Utility.Du.DuJson.ImportFromLocalFile``1(System.String)">
            <summary>Import JSON data from an external file. [250108]</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="filePath">The import file path.</param>
            <remarks>
                <para>
                    <example>
                        To import a JSON object from a local file:
                        <code>
                            TheObject theObject = DuJson.ImportFromLocalFile&lt;TheObject&gt;("/Path/To/Import/File");
                        </code>
                    </example>
                </para>
            </remarks>
            <returns>The contents of the file as a JSON object.</returns>
        </member>
        <member name="T:Outpost31.Core.Service.Spin">
            <summary>Startup/shutdown logic for the Tingen Web Service.</summary>
            <remarks>
                <note title="About this class">
                    Starup/shutdown class for the Tingen Web Service.
                </note>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Service.Spin.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.Service.Spin.Up(Outpost31.Core.Session.TngnWbsvSession,ScriptLinkStandard.Objects.OptionObject2015,System.String,System.String,System.String)">
            <summary>Spin up a new instance of the Tingen Web Service.</summary>
            <param name="sentOptObj"></param>
            <param name="sentScriptParam"></param>
            <returns></returns>
        </member>
        <member name="M:Outpost31.Core.Service.Spin.Down">
            <summary>Spin down the Tingen Web Service.</summary>
            <!-- No matching elements were found for the following include tag --><include file="AppData/XmlDoc/Core.Runtime.xml" path="Core.Runtime/Class[@name=&quot;Spin&quot;]/Down/*" />
        </member>
        <member name="M:Outpost31.Module.Admin.Parse.Request(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Admin requests.</summary>
        </member>
        <member name="M:Outpost31.Module.FormAccess.Deny.SysCodeDoc(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Deny access to the form if the System Code is "DOC".</summary>
        </member>
        <member name="M:Outpost31.Module.FormAccess.Deny.SysCodeDocHoc(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Deny access to the form if the System Code is "DOC" or starts with "HOC".</summary>
        </member>
        <member name="M:Outpost31.Module.FormAccess.Deny.SysCodeFromList(Outpost31.Core.Session.TngnWbsvSession,System.Collections.Generic.List{System.String})">
            <summary>Deny access to the form if the System Code is a member of a list.</summary>
        </member>
        <member name="T:Outpost31.Module.Prototype.Code">
            <summary>Prototype code</summary>
        </member>
        <member name="M:Outpost31.Module.Prototype.Code.FormAccessDocSysCodeDeny(Outpost31.Core.Session.TngnWbsvSession)">
            <summary>Deny access to the form for anyone using the DOC System Code.</summary>
            <remarks>This functionality was added as a standard request on 5-1-2025.</remarks>
        </member>
    </members>
</doc>
